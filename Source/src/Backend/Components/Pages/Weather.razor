@page "/weather"

@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using System.Text
@using Flurl.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.IdentityModel.Tokens
@using OneStream.Backend.Components.Account
@using OneStream.Backend.Data

@attribute [Authorize]
@attribute [StreamRendering]

@inject IdentityUserAccessor UserAccessor
@inject IConfiguration Config

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        var bearer = GenerateJWTToken(user);

        forecasts = await "https://localhost:7057/WeatherForecast"
            .WithOAuthBearerToken(bearer)
            .GetJsonAsync<WeatherForecast[]>();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    public string GenerateJWTToken(ApplicationUser user) {
        var claims = new List<Claim> {
            new(ClaimTypes.NameIdentifier, user.Id),
            new(ClaimTypes.Name, user.UserName),
        };

        var jwtToken = new JwtSecurityToken(
            claims: claims,
            notBefore: DateTime.UtcNow,
            expires: DateTime.UtcNow.AddDays(30),
            signingCredentials: new SigningCredentials(
                new SymmetricSecurityKey(
                    Encoding.UTF8.GetBytes(Config["Authentication:JWT_Secret"])
                ),
                SecurityAlgorithms.HmacSha256Signature)
        );
        return new JwtSecurityTokenHandler().WriteToken(jwtToken);
    }
}
