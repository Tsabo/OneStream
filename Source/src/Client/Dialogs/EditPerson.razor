@using Flurl
@using Flurl.Http
@using OneStream.Client.DataObjects

@inject ISnackbar Snackbar

<EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>

    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-3 mb-n1" />
                Edit Person
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField @bind-Value="@_model.Name" For="() => _model.Name" Label="Name" />
            <MudTextField @bind-Value="@_model.Email" For="() => _model.Email" Label="Email" />

            <MudOverlay Visible="_busy" DarkBackground="true" Absolute="true">
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
            </MudOverlay>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Disabled="_busy" Color="Color.Success" ButtonType="ButtonType.Submit">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    [Parameter]
    public Person Person { get; set; }
    
    private DataObjects.EditPerson _model { get; set; }

    private bool _busy;

    private void Cancel() => MudDialog.Cancel();

    protected override void OnInitialized() =>
        _model = new DataObjects.EditPerson
        {
            Name = Person.Name,
            Email = Person.Email
        };

    private async Task OnValidSubmit(EditContext context)
    {
        _busy = true;
        try
        {
            var state = await AuthenticationState;
            var bearer = state.User.FindFirst(p => p.Type == "Bearer")?.Value;

            try
            {
                var result = await "https://localhost:7057/People"
                    .AppendPathSegment(Person.Id)
                    .WithOAuthBearerToken(bearer)
                    .PutJsonAsync(_model)
                    .ReceiveJson<bool>();

                if (result)
                {
                    Snackbar.Add("Person Updated", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(_model));
                }
                else
                    Snackbar.Add("Unable to update Person", Severity.Warning);
            }
            catch (FlurlHttpException ex) when (ex.Call.Response.StatusCode == (int)System.Net.HttpStatusCode.Unauthorized)
            {
                Snackbar.Add("Unauthorized", Severity.Error);
            }
            catch (FlurlHttpException ex) when (ex.Call.Response.StatusCode == (int)System.Net.HttpStatusCode.BadRequest)
            {
                Snackbar.Add("Failed to update person", Severity.Error);
            }
        }
        finally
        {
            _busy = false;
        }
    }
}